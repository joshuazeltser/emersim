/**
 * Copyright (C) 2016, Laboratorio di Valutazione delle Prestazioni - Politecnico di Milano

 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 */

package jmt.engine.NodeSections;

import javax.swing.JOptionPane;

import jmt.common.exception.NetException;
import jmt.engine.QueueNet.ForkJob;
import jmt.engine.QueueNet.Job;
import jmt.engine.QueueNet.JobInfo;
import jmt.engine.QueueNet.JobInfoList;
import jmt.engine.QueueNet.NetEvent;
import jmt.engine.QueueNet.NetMessage;
import jmt.engine.QueueNet.NetNode;

/**
 *	This class implements a sink: every incoming job is destroyed.
 * 	@author Francesco Radaelli
 */
public class JobSink extends InputSection {

	private JobInfoList jobsList_node;

	/**
	 * Default Constructor creates the JobSink that can be used only as Input Section
	 */
	public JobSink() {
		super();
	}

	@Override
	protected void nodeLinked(NetNode node) {
		jobsList_node = node.getJobInfoList();
	}

	/** This method implements a sink.
	 *  It eats all incoming jobs.
	 * @param message message to be processed.
	 * @throws NetException
	 */
	@Override
	protected int process(NetMessage message) throws NetException {
		switch (message.getEvent()) {

		case NetEvent.EVENT_START:
			//nothing to do
			break;

		case NetEvent.EVENT_JOB:

			//case EVENT_JOB
			//an ack message is sent to the source of the received message.
			//then the job is killed

			Job job = message.getJob();

			// M. Cazzoli, warning for tasks exiting model
			if (!getOwnerNode().getQueueNet().isTaskWarningShown() && job instanceof ForkJob) {
				getOwnerNode().getQueueNet().setTaskWarningShown(true);
				new Thread(new Runnable() {
					@Override
					public void run() {
						try {
							Thread.sleep(1000);
						} catch (InterruptedException e) {
						}
						JOptionPane.showMessageDialog(null, "Some tasks generated by a fork exit the model without merging in a join.",
								"JMT - Warning", JOptionPane.WARNING_MESSAGE);
					}
				}).start();
			}
			send(NetEvent.EVENT_ACK, job, 0.0, message.getSourceSection(), message.getSource());

			//BUG FIXED!
			//jobSink does not add JobInfo objects to its own list, so there
			//is no need to remove them
			//the owner node, on the contrary, adds them when the job message
			//is received before the jobinfo objects were not removed (often
			//causing outOfMemory errors!!!)

			if (jobsList_node == null) {
				jobsList_node = getOwnerNode().getJobInfoList();
			}
			JobInfo jobInfo_node = jobsList_node.lookFor(job);
			if (jobInfo_node != null) {
				//removes job from the jobInfoList of the node
				jobsList_node.removeJob(jobInfo_node);
			}

			// Signals to global jobInfoList removed job - Bertoli Marco
			getOwnerNode().getQueueNet().getJobInfoList().removeJob(job);
			break;

		case NetEvent.EVENT_ACK:
			return MSG_NOT_PROCESSED;

		case NetEvent.EVENT_JOB_RELEASE:
			break;

		case NetEvent.EVENT_JOB_FINISH:
			break;

		case NetEvent.EVENT_STOP:
			break;

		default:
			return MSG_NOT_PROCESSED;
		}

		return MSG_PROCESSED;
	}

}
